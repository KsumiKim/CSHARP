//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Database.Group5.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ChinookEntities : DbContext
    {
        public ChinookEntities()
            : base("name=ChinookEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Album> Albums { get; set; }
        public virtual DbSet<Artist> Artists { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Genre> Genres { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceLine> InvoiceLines { get; set; }
        public virtual DbSet<MediaType> MediaTypes { get; set; }
        public virtual DbSet<Playlist> Playlists { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Track> Tracks { get; set; }
    
        public virtual int Album_Insert(string title, Nullable<int> artistId)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var artistIdParameter = artistId.HasValue ?
                new ObjectParameter("ArtistId", artistId) :
                new ObjectParameter("ArtistId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Album_Insert", titleParameter, artistIdParameter);
        }
    
        public virtual ObjectResult<Album_Search_Result> Album_Search(Nullable<int> artistId, string title)
        {
            var artistIdParameter = artistId.HasValue ?
                new ObjectParameter("ArtistId", artistId) :
                new ObjectParameter("ArtistId", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Album_Search_Result>("Album_Search", artistIdParameter, titleParameter);
        }
    
        public virtual int employee_Delete(Nullable<int> country)
        {
            var countryParameter = country.HasValue ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("employee_Delete", countryParameter);
        }
    
        public virtual ObjectResult<employee_GetAll_Result> employee_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<employee_GetAll_Result>("employee_GetAll");
        }
    
        public virtual ObjectResult<employee_getbypk_Result> employee_getbypk(Nullable<int> employeeid)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("Employeeid", employeeid) :
                new ObjectParameter("Employeeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<employee_getbypk_Result>("employee_getbypk", employeeidParameter);
        }
    
        public virtual int employee_Insert(string lastname, string firstname, string title, string country)
        {
            var lastnameParameter = lastname != null ?
                new ObjectParameter("lastname", lastname) :
                new ObjectParameter("lastname", typeof(string));
    
            var firstnameParameter = firstname != null ?
                new ObjectParameter("firstname", firstname) :
                new ObjectParameter("firstname", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("employee_Insert", lastnameParameter, firstnameParameter, titleParameter, countryParameter);
        }
    
        public virtual int employee_update(Nullable<int> employeeid, string title, Nullable<int> reportsto)
        {
            var employeeidParameter = employeeid.HasValue ?
                new ObjectParameter("employeeid", employeeid) :
                new ObjectParameter("employeeid", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var reportstoParameter = reportsto.HasValue ?
                new ObjectParameter("reportsto", reportsto) :
                new ObjectParameter("reportsto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("employee_update", employeeidParameter, titleParameter, reportstoParameter);
        }
    
        public virtual int invoice_Delete(Nullable<int> invoicedate)
        {
            var invoicedateParameter = invoicedate.HasValue ?
                new ObjectParameter("invoicedate", invoicedate) :
                new ObjectParameter("invoicedate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("invoice_Delete", invoicedateParameter);
        }
    
        public virtual ObjectResult<Invoice_GetAll_Result> Invoice_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Invoice_GetAll_Result>("Invoice_GetAll");
        }
    
        public virtual ObjectResult<Invoice_GetByPK_Result> Invoice_GetByPK(Nullable<int> invoiceid)
        {
            var invoiceidParameter = invoiceid.HasValue ?
                new ObjectParameter("invoiceid", invoiceid) :
                new ObjectParameter("invoiceid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Invoice_GetByPK_Result>("Invoice_GetByPK", invoiceidParameter);
        }
    
        public virtual int invoice_insert(Nullable<int> invoideid, Nullable<int> customerid, Nullable<System.DateTime> invoicedate, string billingaddress, string billingcity, string billingstate, string billingcountry, string bilingpostalcode, Nullable<decimal> total)
        {
            var invoideidParameter = invoideid.HasValue ?
                new ObjectParameter("invoideid", invoideid) :
                new ObjectParameter("invoideid", typeof(int));
    
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            var invoicedateParameter = invoicedate.HasValue ?
                new ObjectParameter("invoicedate", invoicedate) :
                new ObjectParameter("invoicedate", typeof(System.DateTime));
    
            var billingaddressParameter = billingaddress != null ?
                new ObjectParameter("billingaddress", billingaddress) :
                new ObjectParameter("billingaddress", typeof(string));
    
            var billingcityParameter = billingcity != null ?
                new ObjectParameter("billingcity", billingcity) :
                new ObjectParameter("billingcity", typeof(string));
    
            var billingstateParameter = billingstate != null ?
                new ObjectParameter("billingstate", billingstate) :
                new ObjectParameter("billingstate", typeof(string));
    
            var billingcountryParameter = billingcountry != null ?
                new ObjectParameter("billingcountry", billingcountry) :
                new ObjectParameter("billingcountry", typeof(string));
    
            var bilingpostalcodeParameter = bilingpostalcode != null ?
                new ObjectParameter("bilingpostalcode", bilingpostalcode) :
                new ObjectParameter("bilingpostalcode", typeof(string));
    
            var totalParameter = total.HasValue ?
                new ObjectParameter("total", total) :
                new ObjectParameter("total", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("invoice_insert", invoideidParameter, customeridParameter, invoicedateParameter, billingaddressParameter, billingcityParameter, billingstateParameter, billingcountryParameter, bilingpostalcodeParameter, totalParameter);
        }
    
        public virtual int invoice_update(Nullable<int> invoiceid, string billingcountry, Nullable<int> customerid)
        {
            var invoiceidParameter = invoiceid.HasValue ?
                new ObjectParameter("invoiceid", invoiceid) :
                new ObjectParameter("invoiceid", typeof(int));
    
            var billingcountryParameter = billingcountry != null ?
                new ObjectParameter("billingcountry", billingcountry) :
                new ObjectParameter("billingcountry", typeof(string));
    
            var customeridParameter = customerid.HasValue ?
                new ObjectParameter("customerid", customerid) :
                new ObjectParameter("customerid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("invoice_update", invoiceidParameter, billingcountryParameter, customeridParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int track_Delete(Nullable<int> trackid, Nullable<int> bytes)
        {
            var trackidParameter = trackid.HasValue ?
                new ObjectParameter("trackid", trackid) :
                new ObjectParameter("trackid", typeof(int));
    
            var bytesParameter = bytes.HasValue ?
                new ObjectParameter("bytes", bytes) :
                new ObjectParameter("bytes", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("track_Delete", trackidParameter, bytesParameter);
        }
    
        public virtual int track_getall()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("track_getall");
        }
    
        public virtual ObjectResult<track_getbypk_Result> track_getbypk(Nullable<int> trackid)
        {
            var trackidParameter = trackid.HasValue ?
                new ObjectParameter("trackid", trackid) :
                new ObjectParameter("trackid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<track_getbypk_Result>("track_getbypk", trackidParameter);
        }
    
        public virtual int track_insert(Nullable<int> trackid, string name, Nullable<int> albumid, Nullable<int> mediatypeid, Nullable<int> genreid, string composer, Nullable<int> milliseconds, Nullable<int> bytes, Nullable<decimal> unitprice)
        {
            var trackidParameter = trackid.HasValue ?
                new ObjectParameter("Trackid", trackid) :
                new ObjectParameter("Trackid", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var albumidParameter = albumid.HasValue ?
                new ObjectParameter("albumid", albumid) :
                new ObjectParameter("albumid", typeof(int));
    
            var mediatypeidParameter = mediatypeid.HasValue ?
                new ObjectParameter("mediatypeid", mediatypeid) :
                new ObjectParameter("mediatypeid", typeof(int));
    
            var genreidParameter = genreid.HasValue ?
                new ObjectParameter("genreid", genreid) :
                new ObjectParameter("genreid", typeof(int));
    
            var composerParameter = composer != null ?
                new ObjectParameter("composer", composer) :
                new ObjectParameter("composer", typeof(string));
    
            var millisecondsParameter = milliseconds.HasValue ?
                new ObjectParameter("milliseconds", milliseconds) :
                new ObjectParameter("milliseconds", typeof(int));
    
            var bytesParameter = bytes.HasValue ?
                new ObjectParameter("bytes", bytes) :
                new ObjectParameter("bytes", typeof(int));
    
            var unitpriceParameter = unitprice.HasValue ?
                new ObjectParameter("unitprice", unitprice) :
                new ObjectParameter("unitprice", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("track_insert", trackidParameter, nameParameter, albumidParameter, mediatypeidParameter, genreidParameter, composerParameter, millisecondsParameter, bytesParameter, unitpriceParameter);
        }
    
        public virtual int track_update(string composer, Nullable<int> genreid, Nullable<int> trackid)
        {
            var composerParameter = composer != null ?
                new ObjectParameter("composer", composer) :
                new ObjectParameter("composer", typeof(string));
    
            var genreidParameter = genreid.HasValue ?
                new ObjectParameter("genreid", genreid) :
                new ObjectParameter("genreid", typeof(int));
    
            var trackidParameter = trackid.HasValue ?
                new ObjectParameter("trackid", trackid) :
                new ObjectParameter("trackid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("track_update", composerParameter, genreidParameter, trackidParameter);
        }
    }
}
